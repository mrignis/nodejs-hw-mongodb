{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Node.js HW MongoDB API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API documentation for Node.js HW MongoDB application."
  },
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations related to contacts."
    }
  ],
  "servers": [
    {
      "url": "https://nodejs-hw-mongodb-25ob.onrender.com",
      "description": "Local development server."
    },
    {
      "url": "https://nodejs-hw-mongodb-25ob.onrender.com",
      "description": "Deployed production server."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get all contacts",
        "operationId": "getAllContacts",
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": ["Contacts"],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "isFavourite": {
                    "type": "boolean"
                  },
                  "contactType": {
                    "type": "string",
                    "enum": ["personal", "work", "home"]
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Get a contact by ID",
        "operationId": "getContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the contact to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "patch": {
        "tags": ["Contacts"],
        "summary": "Update a contact by ID",
        "operationId": "updateContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the contact to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "delete": {
        "tags": ["Contacts"],
        "summary": "Delete a contact by ID",
        "operationId": "deleteContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the contact to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65e4decdd286b30065d54af9",
            "description": "Contact's id"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Contact's name"
          },
          "phoneNumber": {
            "type": "string",
            "example": "555-44-33",
            "description": "Contact's phone number"
          },
          "email": {
            "type": "string",
            "example": "john@gmail.com",
            "description": "Contact's email"
          },
          "isFavourite": {
            "type": "boolean",
            "example": false,
            "description": "Mark on a favorite contact"
          },
          "contactType": {
            "type": "string",
            "enum": ["personal", "work", "home"],
            "example": "personal",
            "description": "Contact's type. Default value -'personal'"
          },
          "userId": {
            "type": "string",
            "example": "65e4decdd286b30065d54af9",
            "description": "Contact's user id"
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact's photo"
          }
        },
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "contactType",
          "userId"
        ]
      }
    },
    "responses": {
      "404": {
        "description": "Not Found"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
